; conf.ini

# Example conf file with descriptions of each variable (also known as option) and the corresponding values accepted.

# All entries are required.
# If the variable is not needed it can be left blank (the = sign is required) or set to None
# Options which are lists of elements must be separated by any type of white space or new line
# All options in the NETWORKS section are required to have the same number of entries and in the same order
# Relative paths are always taken w.r.t. the EvalNE main folder

# A different conf file is required for each type of networks: directed and undirected.
# Weighted graphs are not yet supported

# The METHODS and TUNE_PARAMS options must be in the same order (first line in TUNE_PARAMETERS is assumed to refer
# to the first method in the METHODS field)

# Separators/delimiters/comments must be delimited by single quotes.
# Tabs have to be provided as '\t' newlines as '\n' and white spaces as '\s'


[GENERAL]
# TASK: the task to evaluate i.e. link prediction (LP), sign prediction (SP), network reconstruction (NR) or node classification (NC)
# Possible values: {'lp', 'sp', 'nr', 'nc'}
TASK = lp

# LP_NUM_EDGE_SPLITS: the number of repetitions of the experiment with different train/test edge splits
# Required if task is 'lp', 'sp' or 'nr'. For 'nc' evaluation this value must be 1.
LP_NUM_EDGE_SPLITS = 2

# NC_NUM_NODE_SPLITS: the number of repetitions for NC experiments with different train/test node splits
# Required if task is 'nc'.
NC_NUM_NODE_SPLITS =

# NC_NODE_FRACS: the fractions of train labels to use when evaluating NC.
# Required if task is 'nc'.
NC_NODE_FRACS = 0.1 0.5 0.9

# NR_EDGE_SAMP_FRAC: the fraction of all possible node pairs to sample and compute precision@k for when evaluating NR.
# Required if task is 'nr'.
NR_EDGE_SAMP_FRAC = 0.1

# EDGE_EMBEDDING_METHODS: the node-pair operators to use.
# Possible values: {'average', 'hadamard', 'weighted_l1', 'weighted_l2'}
EDGE_EMBEDDING_METHODS = average hadamard weighted_l1 weighted_l2

# LP_MODEL: the binary classifier used to predict links from node-pair embeddings.
# Possible values: Kewords such as 'LogisticRegression' or 'LogisticRegressionCV'
# Possible values: Any sklearn classifier e.g.: 'sklearn.ensemble.ExtraTreesClassifier()' or
# 'sklearn.svm.LinearSVC(C=1.0, kernel=’rbf’, degree=3)'
LP_MODEL = LogisticRegressionCV

# EMBED_DIM: the dimensions of the embedding.
EMBED_DIM = 128

# TIMEOUT: the maximum execution time in seconds (or None) for each method including hyperparameter tuning.
TIMEOUT = 1800

# VERBOSE: verbosity level of the execution.
VERBOSE = True

# SEED: the random seed to use in the experiments. If None or empty, system time will be used.
# Possible values: {'', 'None', any_int}
SEED = 42

[NETWORKS]
# NAMES: the names of the networks to be evaluated.
NAMES = StudentDB FB GR-QC

# INPATHS: the paths to the files containing the networks. The system will check if these files exist before execution.
INPATHS = ../data/StudentDB/studentdb.edgelist
          ../data/Facebook/facebook_combined.txt
          ../data/GR-QC/CA-GrQc.txt

# DIRECTED: indicates if the networks are all directed or not. Applies to all networks evaluated at the same time.
DIRECTED = False

# SEPARATORS: indicates the separators used in the provided network files. Whitespaces required as: '\s' '\t' or '\n'
SEPARATORS = ',' '\s' '\t'

# COMMENTS: the characters indicating that a line is a comment in the network files.
COMMENTS = '#' '#' '#'

# LABELPATHS: the path where the node label files can be found.
# Required if task is 'nc'.
LABELPATHS =

[PREPROCESSING]
# RELABEL: relabel or not the network nodes to 0...N (required for methods such as PRUNE)
RELABEL = True

# DEL_SELFLOOPS: delete or not self loops in the network.
DEL_SELFLOOPS = True

# SAVE_PREP_NW: indicates if the preprocessed graph should be stored or not.
SAVE_PREP_NW = False

# WRITE_STATS: write or not common graph statistics as header in the preprocessed network file.
WRITE_STATS = True

# DELIMITER: delimiter to be used when writing the preprocessed graphs to a files.
DELIMITER = ','

[EDGESPLIT]
# TRAINTEST_FRAC: fraction of total edges to use for training and validation. The rest should be used for testing.
TRAINTEST_FRAC = 0.8

# TRAINVALID_FRAC: fraction of train-validation edges to use for training. The rest should be used for validation.
TRAINVALID_FRAC = 0.9

# SPLIT_ALG: the algorithm to use for splitting edges in train/test, train/validation sets.
# Possible values: {'spanning_tree', 'random', 'naive', 'fast', 'timestamp'}.
SPLIT_ALG = spanning_tree

# OWA: determines if the open world (True) or the closed world assumption (False) for non-edges should be used.
OWA = True

# FE_RATIO: ratio of non-edges to edges for tr & te. The num_fe = fe_ratio * num_edges.
FE_RATIO = 1

[BASELINES]
# LP_BASELINES: the link prediction heuristics to evaluate
# Possible values: {'', 'random_prediction', 'common_neighbours', 'jaccard_coefficient', 'adamic_adar_index',
# 'preferential_attachment', 'resource_allocation_index', 'cosine_similarity', 'lhn_index', 'topological_overlap',
# 'katz', 'all_baselines'}
LP_BASELINES = random_prediction
               common_neighbours
               jaccard_coefficient
               adamic_adar_index
               preferential_attachment
               resource_allocation_index
               katz 0.01

# NEIGHBOURHOOD: for directed graphs indicates if the in or the out neighbourhood should be used.
# Possible values: {'', 'in', 'out'}
NEIGHBOURHOOD = in out

[OPENNE METHODS]
# NAMES_OPNE: the names of methods from OpenNE to be evaluated. In the same order as METHODS_OPNE.
NAMES_OPNE = node2vec lap-opne hope-opne

# METHODS_OPNE: the command line call to perform in order to evaluate each method.
# Possible values for the '--method' parameter: {'node2vec', 'deepWalk', 'line', 'grarep', 'sdne', 'hope', 'lap', 'gf'}
# Note 1: the --directed parameter for OpenNE is not required, EvalNE will automatically send the correct input edgelist
# Note 2: the --graph-format does not need to be specified, EvalNE will set it automatically
METHODS_OPNE = python -m openne --method node2vec --graph-format edgelist --epochs 100 --number-walks 10 --walk-length 80 --window-size 10
               python -m openne --method lap --epochs 100
               python -m openne --method hope --epochs 100
#               python -m openne --method gf --epochs 100
#               python -m openne --method sdne --epochs 100 --encoder-list [1024,128] --beta 5 --bs 500
#               python -m openne --method deepWalk --graph-format edgelist --epochs 100 --number-walks 10 --walk-length 80 --window-size 10
#               python -m openne --method line --graph-format edgelist --epochs 10
#               python -m openne --method grarep --epochs 100

# TUNE_PARAMS_OPNE: the parameters of methods from OpenNE to be tuned by the library.
# Example: tuning the p and q parameters for node2vec: --p 0.25 0.5 1 2 --q 0.25 0.5 1 2
# Example: tuning the kstep parameter for grarep:   --kstep 1 5 10
# Note: The first line must contain the parameters for the first method, the second line those of the second methods, ...
TUNE_PARAMS_OPNE =

[OTHER METHODS]
# NAMES_OTHER: the names of any other methods, not form OpenNE, to be evaluated. In the same order as METHODS_OTHER.
NAMES_OTHER = wys verse mnmf struc2vec

# EMBTYPE_OTHER: indicates the method's output types: node embeddings (ne), edge embeddings (ee) or node similarities (e2e)
# Possible values: {'ne', 'ee', 'e2e'}.
EMBTYPE_OTHER = ne ne ne ne

# WRITE_WEIGHTS_OTHER: indicates if training graphs should be given as input to methods weighted (True) or unweighted (False).
WRITE_WEIGHTS_OTHER = False False False False

# WRITE_DIR_OTHER: indicates is training graphs should be given as input to methods with both edge dir. (True) or one (False).
WRITE_DIR_OTHER = True True True True

# METHODS_OTHER: the command line call to perform in order to evaluate each method.
# Note: The string must contain the call to the method as it would be written in the command line.
# For 'ne' methods placeholders (i.e. {}) need to be provided for the parameters: input network file,
# output file and embedding dimensionality, precisely IN THIS ORDER.
# For 'ee' methods with parameters: input network file, input train edgelist, input test edgelist, output
# train embeddings, output test embeddings and embedding dimensionality, 6 placeholders (i.e. {}) need to
# be provided, precisely IN THIS ORDER.
# For methods with parameters: input network file, input edgelist, output embeddings, and embedding
# dimensionality, 4 placeholders (i.e. {}) need to be provided, precisely IN THIS ORDER.
# For 'e2e' methods with parameters: input network file, input train edgelist, input test edgelist, output
# train predictions, output test predictions and embedding dimensionality, 6 placeholders (i.e. {}) need
# to be provided, precisely IN THIS ORDER.
# For methods with parameters: input network file, input edgelist, output predictions, and embedding
# dimensionality, 4 placeholders (i.e. {}) need to be provided, precisely IN THIS ORDER.
METHODS_OTHER = ../methods/wys/venv/bin/python3 ../methods/wys/src/main.py --edge-path {} --embedding-path {} --dimensions {} --attention-path /dev/null --epochs 200 --window-size 5 --learning-rate 0.01 --beta 0.5 --gamma 0.5 --num-of-walks 80
                python ../methods/verse/python/main.py --input {} --output {} --dimension {} --undirected --alpha 0.85 --nsamples 3 --threads 4
                ../methods/M-NMF-py/venv/bin/python ../methods/M-NMF-py/src/main.py --input {} --embedding-output {} --dimensions {} --assignment-output /dev/null --log-output /dev/null --cluster-mean-output /dev/null --dump-matrices False
                python ../methods/struc2vec/src/main.py --input {} --output {} --dimensions {} --num-walks 20 --walk-length 80 --window-size 5 --OPT1 True --OPT2 True --OPT3 True --until-layer 6

# TUNE_PARAMS_OTHER: the parameters to be tuned by the library.
# Example: tuning the number of negative samples for metapath2vec: -negative 1 5 10
# Note: The first line must contain the parameters for the first method, the second line those of the second methods, ...
TUNE_PARAMS_OTHER =

# INPUT_DELIM_OTHER: delimiter for the input network expected by each of the methods.
INPUT_DELIM_OTHER = ',' ',' ',' '\s'

# OUTPUT_DELIM_OTHER: the delimiter used by each method in the output file (when writing node embeddings, edge embeddings or predictions) to files.
OUTPUT_DELIM_OTHER = ',' ',' ',' '\s'

[REPORT]
# MAXIMIZE: the score to maximize when performing model validation.
# Possible values for LP, SP and NR: {'auroc', 'f_score', 'precision', 'recall', 'accuracy', 'fallout', 'miss'}
# Possible values for NC: {'f1_micro', 'f1_macro', 'f1_weighted'}
MAXIMIZE = auroc

# SCORES: the score to be reported in the output file. If '%(maximize)s' the output will be tabular Alg.\Network
# Possible values: {'', '%(maximize)s', 'all'}
# Note: tabular output is not available for mixes of directed and undirected networks.
SCORES = %(maximize)s

# CURVES: the curves to provide as output.
# Possible values: {'', 'roc', 'pr', 'all'}
CURVES = roc

# PRECATK_VALS: the values of k for which to provide the precision at k
PRECATK_VALS = 2 10 100 200 500 800 1000 10000 100000
