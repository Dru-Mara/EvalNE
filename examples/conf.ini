; conf.ini

# Example conf file with descriptions of each parameter and available options.

# All entries are required.
# If the variable is not needed it can be left blank (the = sign is required) or set to None
# Options which are lists of elements must be separated by any type of white space or new line
# All options in the NETWORKS section are required to have the same number of entries and in the same order
# Relative paths are always taken w.r.t. the EvalNE main folder

# The METHODS and TUNE_PARAMETERS options must be in the same order (first line in tune is assumed to refer
# to the first line in the methods field)

# Separators/delimiters/comments must be delimited by single quotes.
# Tabs have to be provided as '\t' newlines as '\n' and white spaces as '\s'


[GENERAL]
# EDGE_EMBEDDING_METHODS: the edge embedding methods to be used.
# Options: {'average', 'hadamard', 'weighted_l1', 'weighted_l2'}
EDGE_EMBEDDING_METHODS = average hadamard

# LP_MODEL: the binary classifier which will predict links from edge embeddings.
# Options: {'LogisticRegression'}
LP_MODEL = LogisticRegression

# EXP_REPEATS: the number of experiment repeats.
EXP_REPEATS = 1

# EMBED_DIM: the dimensions of the embedding.
EMBED_DIM = 128

# VERBOSE: verbosity level of the execution.
VERBOSE = True

# SEED: the random sees to be used in the experiments. If None the system time will be used.
# Options: {'', 'None', any_int}
SEED = 0

[NETWORKS]
# NAMES: the names of the networks to be evaluated.
NAMES = StudentDB
        GR-QC

# INPATHS: the paths to the files containing the networks. The system will check if these files exist before execution.
INPATHS = ../data/StudentDB/studentdb.edgelist
          ../data/GR-QC/CA-GrQc.txt

# OUTPATHS: the output paths where the results (e.g. train test splits, prep graphs...) will be stored.
OUTPATHS = ../output/StudentDB/
           ../output/GR-QC/

# DIRECTED: indicates if the networks are directed.
DIRECTED = False
           False

# SEPARATORS: indicates the separator used in the provided network file. Whitespaces required as: '\s' '\t' or '\n'
SEPARATORS = ','
             '\t'

# COMMENTS: the character determining that a line is a comment inthe newtork file.
COMMENTS = '#'
           '#'

[PREPROCESSING]
# RELABEL: relabel or not the network nodes to 0...N (required for methods such as PRUNE)
RELABEL = True

# DEL_SELFLOOPS: delete or not self loops in the network.
DEL_SELFLOOPS = True

# PREP_NW_NAME: name under which the preprocessed graph should be stored. If blank prep graphs will not be stored.
PREP_NW_NAME = prep_graph.edgelist

# WRITE_STATS: write or not common graph statistics as header in the PREP_NW_NAME file.
WRITE_STATS = True

# DELIMITER: delimiter that whould be used when writing the preprocessed graph to a file.
DELIMITER = ','

[TRAINTEST]
# TRAIN_FRAC: fraction of the total edges which will be used for training. The rest are used for testing.
TRAIN_FRAC = 0.5

# FAST_SPLIT: determines if the fast edge split method (True) or the naive (False) should be used.
FAST_SPLIT = True

# OWA: deretmines if the open world (True) or the closed world assumtion (False) for non-edges should be used.
OWA = True

# NUM_FE_TRAIN: the number of train non-edges. If None the same number as train real edges will be used.
NUM_FE_TRAIN = None

# NUM_FE_TEST: the number of test non-edges. If None the same number as test real edges will be used.
NUM_FE_TEST = None

# TRAINTEST_PATH: path where the train test splits will be stored. If left blank splits will not be stored.
TRAINTEST_PATH = train_test_splits/

[BASELINES]
# LP_BASELINES: the link prediction heuristics to evaluate
# Options: {'', 'random_prediction', 'common_neighbours', 'jaccard_coefficient', 'adamic_adar_index',
# 'preferential_attachment', 'resource_allocation_index'}
LP_BASELINES = random_prediction
               common_neighbours
               jaccard_coefficient
               adamic_adar_index
               preferential_attachment
               resource_allocation_index

# NEIGHBOURHOOD: for directed graphs indicates if the in or the out neighbourhood should be used.
# Options are: {'', 'in', 'out'}
NEIGHBOURHOOD = in out

[OPENNE METHODS]
# NAMES_OPNE: the names of methods from OpenNE to be evaluated. In the same order as METHODS_OPNE.
# Options: {'node2vec', 'deepWalk', 'line', 'grarep', 'sdne', 'hope', 'lap', 'gf'}
NAMES_OPNE = node2vec

# METHODS_OPNE: the command line call to perform in order to evaluate each method.
# Note 1: the --directed parameter for OpenNE is not required, EvalNE will automatically send the corect input edgelist
# Note 2: the --graph-format does not need to be specified, EvalNE will set it automatically
METHODS_OPNE = python -m openne --method node2vec --graph-format edgelist --epochs 100 --number-walks 10 --walk-length 80 --window-size 10
#               python -m openne --method deepWalk --graph-format edgelist --epochs 100 --number-walks 10 --walk-length 80 --window-size 10
#               python -m openne --method line --graph-format edgelist --epochs 10
#               python -m openne --method grarep --epochs 100
#               python -m openne --method sdne --epochs 100
#               python -m openne --method hope --epochs 100
#               python -m openne --method lap --epochs 100

# TUNE_PARAMS_OPNE: the paremeters of methods from OpenNE to be tuned by the library.
# Example: tunning the p and q parameters for node2vec: --p 0.25 0.5 1 2 --q 0.25 0.5 1 2
# Example: tunning the kstep parameter for grarep:   --kstep 1 5 10
TUNE_PARAMS_OPNE =

[OTHER METHODS]
# NAMES_OTHER: the names of methods NOT from OpenNE to be evaluated. In the same order as METHODS_OTHER.
NAMES_OTHER = prune
#             metapath2vec

# EMBTYPE_OTHER: the type of embeding method: node, edge or end to end
# Options: {'ne', 'ee', 'e2e'}
EMBTYPE_OTHER = ne
#                ne

# WRITE_WEIGHTS_OTHER: sets if train graph should be given as input to methods weighted (True) or unweighted (False)
WRITE_WEIGHTS_OTHER = False
#                      False

# WRITE_DIR_OTHER: sets is training graph should be given as input to methods with both edge dir. (True) or one (False)
WRITE_DIR_OTHER = True
#                False

# METHODS_OTHER: the command line call to perform in order to evaluate each method.
METHODS_OTHER = python ../methods/PRUNE/src/main.py --inputgraph {} --output {} --dimension {}
#                ../methods/metapath2vec/metapath2vec -negative 5 -min-count 1 -iter 20 -samples 100 -threads 8 -train {} -output {} -size {}

# TUNE_PARAMS_OTHER: the paremeters of methods NOT from OpenNE to be tuned by the library.
# Example: tunning the number of negative samples for metapath2vec: -negative 1 5 10
TUNE_PARAMS_OTHER =

# INPUT_DELIM_OTHER: delimiter for the input network expected by each of the methods.
INPUT_DELIM_OTHER = '\s'
#                    '\s'

# OUTPUT_DELIM_OTHER: delimiter used in the output file (node embedding, edge embedding, predictions) by each method.
OUTPUT_DELIM_OTHER = ','
#                    '\s'

[REPORT]
# MAXIMIZE: the score to maximize when performing model validation.
# Options: {'auroc', 'f_score', 'precision', 'recall', 'accuracy', 'fallout', 'miss'}
MAXIMIZE = auroc

# SCORES: the score that will be reported in the output file. If '%(maximize)s' the output will be tabular Alg.\Network
# Options: {'', '%(maximize)s', 'all'}
# Note: tabular ouput is not available for mixes of directed and undirected networks.
SCORES = %(maximize)s

# CURVES: the curves to provide as output.
# Options are: {'', 'roc', 'pr', 'all'}
CURVES =

# PRECATK_VALS: the values of k for which to provide the precision at k
PRECATK_VALS = 2 10 100 200 500 800 1000 10000 100000
