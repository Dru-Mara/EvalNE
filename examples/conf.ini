; conf.ini

# All entries are required.
# If the variable is not needed it can be left blank (the = sign is required) or set to None
# Options which are lists of elements must be separated by any type of white space or new line
# All options in the NETWORKS section are required to have the same number of entries and in the same order

# The METHODS and TUNE_PARAMETERS options must be in the same order (first line in tune is assumed to refer
# to the first line in the methods field)

# Separators/delimiters/comments must be delimited by single quotes.
# Tabs have to be provided as '\t' newlines as '\n' and white spaces as '\s'

# Option MAXIMISE determines the score to maximize when performing model validation.
# Option SCORES determines the score that will be reported. If 'all' is specified all results for
# every alg on each network and exp_repeat will be stored in different files.
# Option '%(maximize)' will generate a tabular output of Alg\Network with averaged results over the EXP_REPEATS.
# The tabular ouput is not available for mixes of directed and undirected networks.

[GENERAL]
# Options: {'average', 'hadamard', 'weighted_l1', 'weighted_l2'}
EDGE_EMBEDDING_METHODS = average hadamard
# Options: {'LogisticRegression'}
LP_MODEL = LogisticRegression
EXP_REPEATS = 1
EMBED_DIM = 128
VERBOSE = True

[NETWORKS]
NAMES = StudentDB
        GR-QC
INPATHS = ../data/StudentDB/studentdb.edgelist
          ../data/GR-QC/CA-GrQc.txt
OUTPATHS = ../output/StudentDB/
           ../output/GR-QC/
DIRECTED = False
           False
SEPARATORS = ','
             '\t'
COMMENTS = '#'
           '#'

[PREPROCESSING]
RELABEL = True
DEL_SELFLOOPS = True
PREP_NW_NAME = prep_graph.edgelist
WRITE_STATS = True
DELIMITER = ','

[TRAINTEST]
TRAIN_FRAC = 0.9
FAST_SPLIT = True
OWA = True
NUM_FE_TRAIN = None
NUM_FE_TEST = None
# If given, train test splits will be stored here
TRAINTEST_PATH = train_test_splits/

[BASELINES]
# Options: {'', 'random_prediction', 'common_neighbours', 'jaccard_coefficient', 'adamic_adar_index',
# 'preferential_attachment', 'resource_allocation_index'}
LP_BASELINES = random_prediction
               common_neighbours
               jaccard_coefficient
               adamic_adar_index
               preferential_attachment
               resource_allocation_index
# Options are: {'', 'in', 'out'}
NEIGHBOURHOOD = in out

[OPENNE METHODS]
NAMES_OPNE = node2vec deepWalk line
# Options: {'', 'node2vec', 'deepWalk', 'line', 'grarep', 'sdne', 'hope', 'lap', 'gf'}
# Example: python -m openne --method deepWalk --epochs 100 --number-walks 10 --walk-length 80 --window-size 10
# Note 1: the --directed parameter for OpenNE is not required, EvalNE will automatically send the corect input edgelist
# Note 2: the --graph-format does not need to be specified, EvalNE will set it automatically
METHODS_OPNE = python -m openne --method node2vec --graph-format edgelist --epochs 100 --number-walks 10 --walk-length 80 --window-size 10
               python -m openne --method deepWalk --graph-format edgelist --epochs 100 --number-walks 10 --walk-length 80 --window-size 10
               python -m openne --method line --graph-format edgelist --epochs 10
#               python -m openne --method grarep --epochs 100
#               python -m openne --method sdne --epochs 100
#               python -m openne --method hope --epochs 100
#               python -m openne --method lap --epochs 100
# Example node2vec: --p 0.25 0.5 1 2 --q 0.25 0.5 1 2
# Example grarep:   --kstep 1 5 10
TUNE_PARAMS_OPNE =

[OTHER METHODS]
NAMES_OTHER = prune metapath2vec
METHODS_OTHER = python ../methods/PRUNE/src/main.py --inputgraph {} --output {} --dimension {}
                ../methods/metapath2vec/metapath2vec -negative 5 -min-count 1 -iter 20 -samples 100 -threads 8 -train {} -output {} -size {}
# Example metapath2vec: -negative 1 5 10
TUNE_PARAMS_OTHER =
INPUT_DELIM_OTHER = '\s' '\s'
OUTPUT_DELIM_OTHER = ',' '\s'

[REPORT]
# Options: {'auroc', 'f_score', 'precision', 'recall', 'accuracy', 'fallout', 'miss'}
MAXIMIZE = auroc
# Options: {'', '%(maximize)s', 'all'}
SCORES = %(maximize)s
# Options are: {'', 'roc', 'pr', 'all'}
CURVES =
PRECATK_VALS = 2 10 100 200 500 800 1000 10000
